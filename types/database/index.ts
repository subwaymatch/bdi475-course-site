/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/coding_challenge_attempts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.coding_challenge_attempts.id"];
          user_id?: parameters["rowFilter.coding_challenge_attempts.user_id"];
          challenge_id?: parameters["rowFilter.coding_challenge_attempts.challenge_id"];
          submitted_at?: parameters["rowFilter.coding_challenge_attempts.submitted_at"];
          is_success?: parameters["rowFilter.coding_challenge_attempts.is_success"];
          user_code?: parameters["rowFilter.coding_challenge_attempts.user_code"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["coding_challenge_attempts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** coding_challenge_attempts */
          coding_challenge_attempts?: definitions["coding_challenge_attempts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.coding_challenge_attempts.id"];
          user_id?: parameters["rowFilter.coding_challenge_attempts.user_id"];
          challenge_id?: parameters["rowFilter.coding_challenge_attempts.challenge_id"];
          submitted_at?: parameters["rowFilter.coding_challenge_attempts.submitted_at"];
          is_success?: parameters["rowFilter.coding_challenge_attempts.is_success"];
          user_code?: parameters["rowFilter.coding_challenge_attempts.user_code"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.coding_challenge_attempts.id"];
          user_id?: parameters["rowFilter.coding_challenge_attempts.user_id"];
          challenge_id?: parameters["rowFilter.coding_challenge_attempts.challenge_id"];
          submitted_at?: parameters["rowFilter.coding_challenge_attempts.submitted_at"];
          is_success?: parameters["rowFilter.coding_challenge_attempts.is_success"];
          user_code?: parameters["rowFilter.coding_challenge_attempts.user_code"];
        };
        body: {
          /** coding_challenge_attempts */
          coding_challenge_attempts?: definitions["coding_challenge_attempts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/coding_challenges": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.coding_challenges.created_at"];
          starter_code?: parameters["rowFilter.coding_challenges.starter_code"];
          test_code?: parameters["rowFilter.coding_challenges.test_code"];
          text_markdown?: parameters["rowFilter.coding_challenges.text_markdown"];
          title?: parameters["rowFilter.coding_challenges.title"];
          updated_at?: parameters["rowFilter.coding_challenges.updated_at"];
          /** Programming language used for the challenge (e.g., python, java, c) */
          language?: parameters["rowFilter.coding_challenges.language"];
          /** Primary ID in int8 format for coding challenges */
          id?: parameters["rowFilter.coding_challenges.id"];
          /** Solution code */
          solution_code?: parameters["rowFilter.coding_challenges.solution_code"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["coding_challenges"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** coding_challenges */
          coding_challenges?: definitions["coding_challenges"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.coding_challenges.created_at"];
          starter_code?: parameters["rowFilter.coding_challenges.starter_code"];
          test_code?: parameters["rowFilter.coding_challenges.test_code"];
          text_markdown?: parameters["rowFilter.coding_challenges.text_markdown"];
          title?: parameters["rowFilter.coding_challenges.title"];
          updated_at?: parameters["rowFilter.coding_challenges.updated_at"];
          /** Programming language used for the challenge (e.g., python, java, c) */
          language?: parameters["rowFilter.coding_challenges.language"];
          /** Primary ID in int8 format for coding challenges */
          id?: parameters["rowFilter.coding_challenges.id"];
          /** Solution code */
          solution_code?: parameters["rowFilter.coding_challenges.solution_code"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.coding_challenges.created_at"];
          starter_code?: parameters["rowFilter.coding_challenges.starter_code"];
          test_code?: parameters["rowFilter.coding_challenges.test_code"];
          text_markdown?: parameters["rowFilter.coding_challenges.text_markdown"];
          title?: parameters["rowFilter.coding_challenges.title"];
          updated_at?: parameters["rowFilter.coding_challenges.updated_at"];
          /** Programming language used for the challenge (e.g., python, java, c) */
          language?: parameters["rowFilter.coding_challenges.language"];
          /** Primary ID in int8 format for coding challenges */
          id?: parameters["rowFilter.coding_challenges.id"];
          /** Solution code */
          solution_code?: parameters["rowFilter.coding_challenges.solution_code"];
        };
        body: {
          /** coding_challenges */
          coding_challenges?: definitions["coding_challenges"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/mcq_with_options": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.mcq_with_options.id"];
          created_at?: parameters["rowFilter.mcq_with_options.created_at"];
          updated_at?: parameters["rowFilter.mcq_with_options.updated_at"];
          title?: parameters["rowFilter.mcq_with_options.title"];
          text_markdown?: parameters["rowFilter.mcq_with_options.text_markdown"];
          options?: parameters["rowFilter.mcq_with_options.options"];
          num_correct_options?: parameters["rowFilter.mcq_with_options.num_correct_options"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["mcq_with_options"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/multiple_choice_attempts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.multiple_choice_attempts.id"];
          user_id?: parameters["rowFilter.multiple_choice_attempts.user_id"];
          question_id?: parameters["rowFilter.multiple_choice_attempts.question_id"];
          submitted_at?: parameters["rowFilter.multiple_choice_attempts.submitted_at"];
          is_success?: parameters["rowFilter.multiple_choice_attempts.is_success"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["multiple_choice_attempts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** multiple_choice_attempts */
          multiple_choice_attempts?: definitions["multiple_choice_attempts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.multiple_choice_attempts.id"];
          user_id?: parameters["rowFilter.multiple_choice_attempts.user_id"];
          question_id?: parameters["rowFilter.multiple_choice_attempts.question_id"];
          submitted_at?: parameters["rowFilter.multiple_choice_attempts.submitted_at"];
          is_success?: parameters["rowFilter.multiple_choice_attempts.is_success"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.multiple_choice_attempts.id"];
          user_id?: parameters["rowFilter.multiple_choice_attempts.user_id"];
          question_id?: parameters["rowFilter.multiple_choice_attempts.question_id"];
          submitted_at?: parameters["rowFilter.multiple_choice_attempts.submitted_at"];
          is_success?: parameters["rowFilter.multiple_choice_attempts.is_success"];
        };
        body: {
          /** multiple_choice_attempts */
          multiple_choice_attempts?: definitions["multiple_choice_attempts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/multiple_choice_options": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.multiple_choice_options.id"];
          question_id?: parameters["rowFilter.multiple_choice_options.question_id"];
          text_markdown?: parameters["rowFilter.multiple_choice_options.text_markdown"];
          is_correct?: parameters["rowFilter.multiple_choice_options.is_correct"];
          /** Explanation shown to a learner after submission (pertaining to each option) */
          explanation_markdown?: parameters["rowFilter.multiple_choice_options.explanation_markdown"];
          /** Ordering */
          order?: parameters["order"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["multiple_choice_options"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** multiple_choice_options */
          multiple_choice_options?: definitions["multiple_choice_options"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.multiple_choice_options.id"];
          question_id?: parameters["rowFilter.multiple_choice_options.question_id"];
          text_markdown?: parameters["rowFilter.multiple_choice_options.text_markdown"];
          is_correct?: parameters["rowFilter.multiple_choice_options.is_correct"];
          /** Explanation shown to a learner after submission (pertaining to each option) */
          explanation_markdown?: parameters["rowFilter.multiple_choice_options.explanation_markdown"];
          /** Used to determine the display order */
          order?: parameters["rowFilter.multiple_choice_options.order"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.multiple_choice_options.id"];
          question_id?: parameters["rowFilter.multiple_choice_options.question_id"];
          text_markdown?: parameters["rowFilter.multiple_choice_options.text_markdown"];
          is_correct?: parameters["rowFilter.multiple_choice_options.is_correct"];
          /** Explanation shown to a learner after submission (pertaining to each option) */
          explanation_markdown?: parameters["rowFilter.multiple_choice_options.explanation_markdown"];
          /** Used to determine the display order */
          order?: parameters["rowFilter.multiple_choice_options.order"];
        };
        body: {
          /** multiple_choice_options */
          multiple_choice_options?: definitions["multiple_choice_options"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/multiple_choice_questions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.multiple_choice_questions.id"];
          created_at?: parameters["rowFilter.multiple_choice_questions.created_at"];
          updated_at?: parameters["rowFilter.multiple_choice_questions.updated_at"];
          title?: parameters["rowFilter.multiple_choice_questions.title"];
          /** Question text in markdown format */
          text_markdown?: parameters["rowFilter.multiple_choice_questions.text_markdown"];
          /** Explanation shown to a learner after submission (pertaining to the whole question) */
          explanation_markdown?: parameters["rowFilter.multiple_choice_questions.explanation_markdown"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["multiple_choice_questions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** multiple_choice_questions */
          multiple_choice_questions?: definitions["multiple_choice_questions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.multiple_choice_questions.id"];
          created_at?: parameters["rowFilter.multiple_choice_questions.created_at"];
          updated_at?: parameters["rowFilter.multiple_choice_questions.updated_at"];
          title?: parameters["rowFilter.multiple_choice_questions.title"];
          /** Question text in markdown format */
          text_markdown?: parameters["rowFilter.multiple_choice_questions.text_markdown"];
          /** Explanation shown to a learner after submission (pertaining to the whole question) */
          explanation_markdown?: parameters["rowFilter.multiple_choice_questions.explanation_markdown"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.multiple_choice_questions.id"];
          created_at?: parameters["rowFilter.multiple_choice_questions.created_at"];
          updated_at?: parameters["rowFilter.multiple_choice_questions.updated_at"];
          title?: parameters["rowFilter.multiple_choice_questions.title"];
          /** Question text in markdown format */
          text_markdown?: parameters["rowFilter.multiple_choice_questions.text_markdown"];
          /** Explanation shown to a learner after submission (pertaining to the whole question) */
          explanation_markdown?: parameters["rowFilter.multiple_choice_questions.explanation_markdown"];
        };
        body: {
          /** multiple_choice_questions */
          multiple_choice_questions?: definitions["multiple_choice_questions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          display_name?: parameters["rowFilter.profiles.display_name"];
          email?: parameters["rowFilter.profiles.email"];
          /** A user's role for role-based access control */
          roles?: parameters["rowFilter.profiles.roles"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          display_name?: parameters["rowFilter.profiles.display_name"];
          email?: parameters["rowFilter.profiles.email"];
          /** A user's role for role-based access control */
          roles?: parameters["rowFilter.profiles.roles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          display_name?: parameters["rowFilter.profiles.display_name"];
          email?: parameters["rowFilter.profiles.email"];
          /** A user's role for role-based access control */
          roles?: parameters["rowFilter.profiles.roles"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/is_admin": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/create_profile_for_new_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/generate_uid": {
    post: {
      parameters: {
        body: {
          args: {
            size: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  coding_challenge_attempts: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user_id: string;
    /**
     * Note:
     * This is a Foreign Key to `coding_challenges.id`.<fk table='coding_challenges' column='id'/>
     */
    challenge_id: number;
    submitted_at: string;
    is_success: boolean;
    user_code?: string;
  };
  /** Coding challenges */
  coding_challenges: {
    created_at?: string;
    starter_code?: string;
    test_code: string;
    text_markdown?: string;
    title?: string;
    updated_at?: string;
    /** Programming language used for the challenge (e.g., python, java, c) */
    language: string;
    /**
     * Primary ID in int8 format for coding challenges
     *
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Solution code */
    solution_code?: string;
  };
  mcq_with_options: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id?: number;
    created_at?: string;
    updated_at?: string;
    title?: string;
    text_markdown?: string;
    options?: string;
    num_correct_options?: number;
  };
  /** Recorded attempts of multiple choice questions */
  multiple_choice_attempts: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user_id: string;
    /**
     * Note:
     * This is a Foreign Key to `multiple_choice_questions.id`.<fk table='multiple_choice_questions' column='id'/>
     */
    question_id: number;
    submitted_at?: string;
    is_success: boolean;
  };
  /** Options for multiple choice questions */
  multiple_choice_options: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Note:
     * This is a Foreign Key to `multiple_choice_questions.id`.<fk table='multiple_choice_questions' column='id'/>
     */
    question_id: number;
    text_markdown: string;
    is_correct: boolean;
    /** Explanation shown to a learner after submission (pertaining to each option) */
    explanation_markdown?: string;
    /** Used to determine the display order */
    order: number;
  };
  /** Multiple choice questions */
  multiple_choice_questions: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    created_at: string;
    updated_at: string;
    title: string;
    /** Question text in markdown format */
    text_markdown: string;
    /** Explanation shown to a learner after submission (pertaining to the whole question) */
    explanation_markdown?: string;
  };
  profiles: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    updated_at?: string;
    display_name?: string;
    email?: string;
    /** A user's role for role-based access control */
    roles?: unknown[];
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** coding_challenge_attempts */
  "body.coding_challenge_attempts": definitions["coding_challenge_attempts"];
  "rowFilter.coding_challenge_attempts.id": string;
  "rowFilter.coding_challenge_attempts.user_id": string;
  "rowFilter.coding_challenge_attempts.challenge_id": string;
  "rowFilter.coding_challenge_attempts.submitted_at": string;
  "rowFilter.coding_challenge_attempts.is_success": string;
  "rowFilter.coding_challenge_attempts.user_code": string;
  /** coding_challenges */
  "body.coding_challenges": definitions["coding_challenges"];
  "rowFilter.coding_challenges.created_at": string;
  "rowFilter.coding_challenges.starter_code": string;
  "rowFilter.coding_challenges.test_code": string;
  "rowFilter.coding_challenges.text_markdown": string;
  "rowFilter.coding_challenges.title": string;
  "rowFilter.coding_challenges.updated_at": string;
  /** Programming language used for the challenge (e.g., python, java, c) */
  "rowFilter.coding_challenges.language": string;
  /** Primary ID in int8 format for coding challenges */
  "rowFilter.coding_challenges.id": string;
  /** Solution code */
  "rowFilter.coding_challenges.solution_code": string;
  /** mcq_with_options */
  "body.mcq_with_options": definitions["mcq_with_options"];
  "rowFilter.mcq_with_options.id": string;
  "rowFilter.mcq_with_options.created_at": string;
  "rowFilter.mcq_with_options.updated_at": string;
  "rowFilter.mcq_with_options.title": string;
  "rowFilter.mcq_with_options.text_markdown": string;
  "rowFilter.mcq_with_options.options": string;
  "rowFilter.mcq_with_options.num_correct_options": string;
  /** multiple_choice_attempts */
  "body.multiple_choice_attempts": definitions["multiple_choice_attempts"];
  "rowFilter.multiple_choice_attempts.id": string;
  "rowFilter.multiple_choice_attempts.user_id": string;
  "rowFilter.multiple_choice_attempts.question_id": string;
  "rowFilter.multiple_choice_attempts.submitted_at": string;
  "rowFilter.multiple_choice_attempts.is_success": string;
  /** multiple_choice_options */
  "body.multiple_choice_options": definitions["multiple_choice_options"];
  "rowFilter.multiple_choice_options.id": string;
  "rowFilter.multiple_choice_options.question_id": string;
  "rowFilter.multiple_choice_options.text_markdown": string;
  "rowFilter.multiple_choice_options.is_correct": string;
  /** Explanation shown to a learner after submission (pertaining to each option) */
  "rowFilter.multiple_choice_options.explanation_markdown": string;
  /** Used to determine the display order */
  "rowFilter.multiple_choice_options.order": string;
  /** multiple_choice_questions */
  "body.multiple_choice_questions": definitions["multiple_choice_questions"];
  "rowFilter.multiple_choice_questions.id": string;
  "rowFilter.multiple_choice_questions.created_at": string;
  "rowFilter.multiple_choice_questions.updated_at": string;
  "rowFilter.multiple_choice_questions.title": string;
  /** Question text in markdown format */
  "rowFilter.multiple_choice_questions.text_markdown": string;
  /** Explanation shown to a learner after submission (pertaining to the whole question) */
  "rowFilter.multiple_choice_questions.explanation_markdown": string;
  /** profiles */
  "body.profiles": definitions["profiles"];
  "rowFilter.profiles.id": string;
  "rowFilter.profiles.updated_at": string;
  "rowFilter.profiles.display_name": string;
  "rowFilter.profiles.email": string;
  /** A user's role for role-based access control */
  "rowFilter.profiles.roles": string;
}

export interface operations {}

export interface external {}
